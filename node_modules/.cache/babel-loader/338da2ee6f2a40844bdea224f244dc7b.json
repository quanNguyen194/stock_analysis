{"remainingRequest":"/home/quan/Documents/Projects/stock_analysis/node_modules/babel-loader/lib/index.js!/home/quan/Documents/Projects/stock_analysis/node_modules/vuetify/lib/directives/click-outside/index.js","dependencies":[{"path":"/home/quan/Documents/Projects/stock_analysis/node_modules/vuetify/lib/directives/click-outside/index.js","mtime":499162500000},{"path":"/home/quan/Documents/Projects/stock_analysis/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/quan/Documents/Projects/stock_analysis/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.some\";\nimport _typeof from \"/home/quan/Documents/Projects/stock_analysis/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction directive(e, el, binding) {\n  var handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n  var isActive = _typeof(binding.value) === 'object' && binding.value.closeConditional || defaultConditional; // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n\n  if (!e || isActive(e) === false) return; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (_typeof(binding.value) === 'object' && binding.value.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  !elements.some(function (el) {\n    return el.contains(e.target);\n  }) && setTimeout(function () {\n    isActive(e) && handler && handler(e);\n  }, 0);\n}\n\nexport var ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding);\n    }; // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n\n\n    var app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app.addEventListener('click', onClick, true);\n    el._clickOutside = onClick;\n  },\n  unbind: function unbind(el) {\n    if (!el._clickOutside) return;\n    var app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app && app.removeEventListener('click', el._clickOutside, true);\n    delete el._clickOutside;\n  }\n};\nexport default ClickOutside;",{"version":3,"sources":["../../../src/directives/click-outside/index.ts"],"names":[],"mappings":";;;AAYA,SAAA,kBAAA,GAA2B;AACzB,SAAA,IAAA;AACD;;AAED,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,EAAA,OAAA,EAAoF;AAClF,MAAM,OAAO,GAAG,OAAO,OAAO,CAAd,KAAA,KAAA,UAAA,GAAsC,OAAO,CAA7C,KAAA,GAAsD,OAAO,CAAP,KAAA,CAAtE,OAAA;AAEA,MAAM,QAAQ,GAAI,QAAO,OAAO,CAAd,KAAA,MAAA,QAAA,IAAqC,OAAO,CAAP,KAAA,CAAtC,gBAAC,IAHgE,kBAGlF,CAHkF,CAKlF;AACA;AACA;AACA;;AACA,MAAI,CAAA,CAAA,IAAM,QAAQ,CAAR,CAAQ,CAAR,KAAV,KAAA,EATkF,OAAA,CAWlF;AACA;;AACA,MAAM,QAAQ,GAAG,CAAE,QAAO,OAAO,CAAd,KAAA,MAAA,QAAA,IAAqC,OAAO,CAAP,KAAA,CAAtC,OAAC,IAAgE;AAAA,WAbD,EAaC;AAAA,GAAlE,GAAjB,CAbkF,CAclF;;;AACA,EAAA,QAAQ,CAAR,IAAA,CAfkF,EAelF,EAfkF,CAiBlF;AACA;AACA;AACA;AACA;;AACA,GAAC,QAAQ,CAAR,IAAA,CAAc,UAAA,EAAE;AAAA,WAAI,EAAE,CAAF,QAAA,CAAY,CAAC,CAAlC,MAAqB,CAAJ;AAAA,GAAhB,CAAD,IAAuD,UAAU,CAAC,YAAK;AACrE,IAAA,QAAQ,CAAR,CAAQ,CAAR,IAAA,OAAA,IAA0B,OAAO,CAAjC,CAAiC,CAAjC;AAD+D,GAAA,EAAjE,CAAiE,CAAjE;AAGD;;AAED,OAAO,IAAM,YAAY,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,EAAA,QAN0B,oBAMlB,EANkB,EAMlB,OANkB,EAM+B;AACvD,QAAM,OAAO,GAAI,SAAX,OAAW,CAAA,CAAD;AAAA,aAAc,SAAS,CAAA,CAAA,EAAA,EAAA,EADgB,OAChB,CAAvB;AAAA,KAAhB,CADuD,CAEvD;AACA;AACA;;;AACA,QAAM,GAAG,GAAG,QAAQ,CAAR,aAAA,CAAA,YAAA,KACV,QAAQ,CAN6C,IAKvD,CALuD,CAMvC;;AAChB,IAAA,GAAG,CAAH,gBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,IAAA;AACA,IAAA,EAAE,CAAF,aAAA,GAAA,OAAA;AAdwB,GAAA;AAiB1B,EAAA,MAjB0B,kBAiBpB,EAjBoB,EAiBH;AACrB,QAAI,CAAC,EAAE,CAAP,aAAA,EAAuB;AAEvB,QAAM,GAAG,GAAG,QAAQ,CAAR,aAAA,CAAA,YAAA,KACV,QAAQ,CAJW,IAGrB,CAHqB,CAIL;;AAChB,IAAA,GAAG,IAAI,GAAG,CAAH,mBAAA,CAAA,OAAA,EAAiC,EAAE,CAAnC,aAAA,EAAP,IAAO,CAAP;AACA,WAAO,EAAE,CAAT,aAAA;AACD;AAxByB,CAArB;AA2BP,eAAA,YAAA","sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: Event) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value?: ((e: Event) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): void {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value!.handler\n\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || isActive(e) === false) return\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  !elements.some(el => el.contains(e.target as Node)) && setTimeout(() => {\n    isActive(e) && handler && handler(e)\n  }, 0)\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding)\n    // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app.addEventListener('click', onClick, true)\n    el._clickOutside = onClick\n  },\n\n  unbind (el: HTMLElement) {\n    if (!el._clickOutside) return\n\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app && app.removeEventListener('click', el._clickOutside, true)\n    delete el._clickOutside\n  },\n}\n\nexport default ClickOutside\n"],"sourceRoot":""}]}